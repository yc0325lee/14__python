# vim: ft=python ts=4 sw=4 tw=999 expandtab
# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------------
# File : lib__argparse.py
# Author : yc0325lee
# Created : 2022-03-08 00:01:28 by lee2103
# Modified : 2022-03-08 00:01:28 by lee2103
# Description : 
# ----------------------------------------------------------------------------
import os
import argparse


if True:
    # -------------------------------------
    # - adding choices
    parser = argparse.ArgumentParser(
        prog='example',
        description='this is an example of argparse',
        epilog='-' * 39,
    )
    parser.add_argument(
        "value", type=int, action='store', help="integer value"
    ) # action="store" (default)
    parser.add_argument(
        "-v", "--verbosity", type=int, choices=[0, 1, 2],
        help="output verbosity {0, 1, 2}"
    )
    parser.add_argument(
        "-c", "--count", action='count', default=0,
        help="number of times for print"
    )
    parser.add_argument(
        "-d", "--debug", action='store_true',
        help="debugging mode enable"
    )
    parser.print_help()

    #arguements = [
    #    '-d', '--verbosity', '2', '-c', '--count', '-c', '4',
    #]
    arguements = [
        ['-d', '--verbosity', '2', '-ccccc', '4', '5',]
    ]
    args = parser.parse_args(arguements)
    print('args=', args)
    # args= Namespace(value=4, verbosity=2)

    if args.debug:
        print('[dbg ] debugg mode enabled!')
    # [dbg ] debugg mode enabled!

    answer = args.value ** 2
    if args.verbosity == 2:
        print(f"the square of {args.value} equals {answer}")
    elif args.verbosity == 1:
        print(f"{args.value}^2 == {answer}")
    else:
        print(answer)
    # the square of 4 equals 16

    for i in range(args.count):
        print(f'count= {i}, answer= {answer}')


if False:
    parser = argparse.ArgumentParser()
    parser.add_argument("value", type=int, help="input integer value")
    parser.add_argument("-v", "--verbosity", action="count", default=0, help="increase output verbosity")
    args = parser.parse_args()
    answer = args.value ** 2
    if args.verbosity >= 2:
        print(f"the square of {args.value} equals {answer}")
    elif args.verbosity == 1:
        print(f"{args.value}^2 == {answer}")
    else:
        print(answer)


if False:
    parser = argparse.ArgumentParser()
    parser.add_argument("base", type=int, help="the base (int)")
    parser.add_argument("exponent", type=int, help="the exponent (int)")
    parser.add_argument("-v", "--verbose", action="count", default=0, help="increase output verbosity")
    args = parser.parse_args()
    answer = args.base ** args.exponent
    if args.verbose >= 2:
        print(f"{args.base} to the power {args.exponent} equals {answer}")
    elif args.verbose == 1:
        print(f"{args.base}^{args.exponent} == {answer}")
    else:
        print(answer)


if False:
    parser = argparse.ArgumentParser()
    parser.add_argument("base", type=int, help="the base (int)")
    parser.add_argument("exponent", type=int, help="the exponent (int)")
    parser.add_argument("-v", "--verbose", action="count", default=0, help="increase output verbosity")
    args = parser.parse_args()
    answer = args.base ** args.exponent
    if args.verbose >= 3:
        print(f"[info] running '{__file__}'")
    if args.verbose >= 2:
        print(f"{args.base} to the power {args.exponent} equals {answer}")
    if args.verbose >= 1:
        print(f"{args.base}^{args.exponent} == ", end="")
    print(answer)


# conflicting options and description
if False:
    parser = argparse.ArgumentParser(
        prog="python lib__argparse.py",
        description="explanation: calculate X to the power of Y",
        epilog="----------- end of usage -------------"
    )
    parser.add_argument("base", type=int, help="the base (int)")
    parser.add_argument("exponent", type=int, help="the exponent (int)")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-v", "--verbose", action="store_true", help="turn on verbose-mode")
    group.add_argument("-q", "--quiet", action="store_true", help="turn on quiet-mode")
    group.add_argument("--version", action="version", version="%(prog)s v1.00", help="show program version")
    args = parser.parse_args()
    answer = args.base ** args.exponent
    if args.quiet:
        print(answer)
    elif args.verbose:
        print(f"{args.base} to the power {args.exponent} equals {answer}")
    else:
        print(f"{args.base}^{args.exponent} == {answer}")


# summing all arguments of integer type
if False:
    parser = argparse.ArgumentParser(
        prog="python lib__argparse.py",
        description="explanation: calculate the sum of all input integer values",
        epilog="----------- end of usage -------------"
    )
    parser.add_argument("value", type=int, nargs="+", help="value (integer)")
    parser.add_argument("--version", action="version", version="%(prog)s v1.00", help="show program version")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-v", "--verbose", action="store_true", help="turn on verbose-mode")
    group.add_argument("-q", "--quiet", action="store_true", help="turn on quiet-mode")

    args = parser.parse_args()

    answer = 0
    for val in args.value:
        answer += val

    if args.quiet:
        print(answer)
    elif args.verbose:
        for i, val in enumerate(args.value):
            if i == len(args.value)-1:
                print(f"{val} = ", end="")
            else:
                print(f"{val} + ", end="")
        print(answer)
    else:
        print(f"sum = {answer}")


# arguments for deep_cnn trainig & testing
if False:
    parser = argparse.ArgumentParser(
        prog="python " + os.path.basename(__file__),
        description="description: train or test 'deep_cnn' model",
        epilog="----------- end of usage -------------"
    )
    parser.add_argument('--dtype', type=str, action='store', default='float64', required=True,
        help="data-type for cnn parameters and inputs - float64(default), float32, float16")
    parser.add_argument("--dropout", type=float, action='store', default=0.0, required=True,
        help="dropout_ratio, float [0.0, 1.0), default=0.0")
    parser.add_argument("--batch_normalize", action='store_true',
        help="batch_normalization enable, default=False")

    args = parser.parse_args()

    print("args.dtype=", args.dtype, type(args.dtype))
    print("args.dropout=", args.dropout, type(args.dropout))
    print("args.batch_normalize=", args.batch_normalize, type(args.batch_normalize))

    name = "deep_cnn-arch={}-dropout={:.1f}".format(args.dtype, args.dropout)
    print(name)
